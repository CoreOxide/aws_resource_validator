#!/usr/bin/env python3
import toml
import shutil
from pathlib import Path


def create_service_pyproject(service_dir, model_name, version, base_dir):
    """Create a pyproject.toml file in the service subfolder and copy base_validator_model.py"""
    pypi_valid_name = model_name.rstrip('_')
    package_name = f"boto3-pydantic-{pypi_valid_name}"
    package_dir_name = f"boto3_pydantic_{pypi_valid_name}"

    # Create the package directory
    package_dir = service_dir / package_dir_name
    package_dir.mkdir(exist_ok=True)

    # Create __init__.py inside package directory
    with open(package_dir / "__init__.py", "w") as f:
        f.write(f"# boto3-pydantic-{pypi_valid_name} package\n")

    # Create README.md file for the package
    readme_content = f"""# {package_name}

This package was automatically generated by aws-resource-validator repository.

For more information, visit:
- Package homepage: https://coreoxide.github.io/aws_resource_validator/
- GitHub repository: https://github.com/CoreOxide/aws_resource_validator
- PyPI project: https://pypi.org/project/aws-resource-validator/

Pydantic models for AWS {model_name.capitalize()}.
"""

    with open(service_dir / "README.md", "w") as f:
        f.write(readme_content)

    # Copy existing .py files from service_dir to package_dir
    for py_file in service_dir.glob("*.py"):
        if py_file.name != "pyproject.toml" and py_file.is_file():
            shutil.copy2(py_file, package_dir / py_file.name)

    pyproject_content = {
        "build-system": {
            "requires": ["poetry-core"],
            "build-backend": "poetry.core.masonry.api"
        },
        "tool": {
            "poetry": {
                "name": package_name,
                "version": version,
                "description": f"Pydantic models for AWS {model_name.capitalize()}",
                "readme": "README.md",  # Use readme instead of long_description
                "repository": "https://github.com/CoreOxide/aws_resource_validator",
                "homepage": "https://coreoxide.github.io/aws_resource_validator/",
                "authors": [
                    "Alexy Grabov <alexy.grabov@gmail.com>", "Yafit Tupman <ytupman@gmail.com>"
                ],
                "dependencies": {
                    "python": "^3.9 || ^3.12 || ^3.13",
                    "pydantic": "^2.8.2",
                    "botocore": "*"
                },
                "packages": [
                    {"include": package_dir_name}
                ],
                "keywords": ["aws", "boto3", "pydantic", "models", f"{pypi_valid_name}"],
                "classifiers": [
                    "Development Status :: 4 - Beta",
                    "Intended Audience :: Developers",
                    "License :: OSI Approved :: Apache Software License",
                    "Programming Language :: Python :: 3",
                    "Topic :: Software Development :: Libraries :: Python Modules"
                ]
            }
        }
    }

    with open(service_dir / "pyproject.toml", "w") as f:
        toml.dump(pyproject_content, f)

    # Copy base_validator_model.py to the package directory
    base_validator_path = base_dir / "base_validator_model.py"
    if base_validator_path.exists():
        shutil.copy2(base_validator_path, package_dir / "base_validator_model.py")
        print(f"Copied base_validator_model.py to {package_dir}")
    else:
        print(f"Warning: base_validator_model.py not found at {base_validator_path}")

    print(f"Created package structure in {package_dir}")


def main():
    # Get absolute paths based on script location
    script_dir = Path(__file__).resolve().parent
    project_root = script_dir.parent
    
    # Read the original project version using absolute path
    main_pyproject = toml.load(project_root / "pyproject.toml")
    version = main_pyproject["tool"]["poetry"]["version"]

    # Base directory for pydantic models using absolute path
    base_dir = project_root / "aws_resource_validator" / "pydantic_models"

    # Create pyproject.toml in each service subfolder
    for model_dir in base_dir.iterdir():
        if model_dir.is_dir() and not model_dir.name.startswith("__"):
            create_service_pyproject(model_dir, model_dir.name, version, base_dir)

    print(f"Created pyproject.toml files in all service subfolders")

if __name__ == "__main__":
    main()

